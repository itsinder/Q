return require 'CodeGen' {

   declaration = [[

#include <inttypes.h>
extern int
${name}(  
      const ${op1type} * restrict in1,  
      const ${op2type} * restrict in2,  
      uint64_t nR,  
      ${opt_args}
      ${returntype} * restrict out 
      ) 
;

   ]],
   definition = [[

#include "_${name}.h"

static void
__operation(
      ${op1type} a,
      ${op2type} b, 
      ${returntype} *ptr_c
      )
      {
      ${returntype} c;
      ${scalar_op};
      *ptr_c = c;
      }

int
${name}(  
      const ${op1type} * restrict in1,  
      const ${op2type} * restrict in2,  
      uint64_t nR,  
      ${returntype} * restrict out 
      )

{ 
  int status = 0;
 ${op1type} inv1; 
 ${op2type} inv2; 
 ${returntype} outv; 
#pragma omp parallel for 
 for ( uint64_t i = 0; i < nR; i++ ) {  
   inv1 = *in1; 
   inv2 = *in2; 
   __operation(inv1, inv2, &outv);
   *out = outv; 
   in1++; 
   in2++; 
   out++; 
 } 
 return status;
}

   ]]
}
