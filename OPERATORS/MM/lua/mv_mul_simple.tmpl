return require 'Q/UTILS/lua/code_gen' {

   declaration = [[
#include "q_incs.h"
#include <omp.h>
#include <sys/sysinfo.h>

extern int 
${fn}(
    ${in1_ctype} ** x,  /* M by K */
    ${in2_ctype} * y,  /* K by 1 */
    ${out_ctype} * z,  /* M by 1 */
    int M,
    int K
    );
    ]],

    definition = [[
#include "_${fn}.h"
int 
${fn}(
    ${in1_ctype} ** x,  /* M by K */
    ${in2_ctype} * y,  /* K by 1 */
    ${out_ctype} * z,  /* M by 1 */
    int M,
    int K
    )
{
  int status = 0;
#pragma omp parallel for schedule (static, 64)
  for ( int m = 0; m < M; m++ ) {
    double sum = 0;
#pragma omp simd reduction(+:sum)
    for ( int k = 0; k < K; k++ ) { 
      sum += y[k] * x[m][k];
    }
    z[m] = sum;
  }
  return status;
}
]]
}
