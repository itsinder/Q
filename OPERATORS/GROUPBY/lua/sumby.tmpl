return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include "_get_bit_u64.h"
${includes}
extern int
${fn}(  
      const ${val_ctype} * const restrict val_fld,  /* [nR_in] */
      uint64_t nR_in,
      const ${grpby_ctype} * const restrict grpby_fld,  /* [nR_in] */

      ${out_ctype} * restrict out_fld, /* [n_buf_per_core * nT] */
      uint64_t nR_out,
      int nT, //  number of threads
      int n_buf_per_core,

      const uint64_t * const restrict cfld, 
      bool is_safe
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

int
${fn}(  
      const ${val_ctype} * const restrict val_fld,  /* [nR_in] */
      uint64_t nR_in,
      const ${grpby_ctype} * const restrict grpby_fld,  /* [nR_in] */

      ${out_ctype} * restrict out_fld, /* [nR_out] */
      uint64_t nR_out,
      int nT, //  number of threads
      int n_buf_per_core,

      const uint64_t * const restrict cfld, 
      bool is_safe
      )

{ 
  int status = 0;

  /* Assumption: out_fld has been set to 0 prior to the call */
  if ( is_safe ) {
#pragma omp parallel for schedule(static, 1024)
    for ( uint64_t i = 0; i < nR_in; i++ ) {
      ${grpby_ctype} grpby = grpby_fld[i];
      if ( ( grpby < 0 ) || ( grpby >= (${out_ctype})nR_out ) ) { 
        status = -1;
      }
    }
    cBYE(status);
  }
  int num_blocks = nR_in / nT;
  if ( num_blocks == 0 )  { num_blocks++; }
  int block_size = nR_in / num_blocks;
#pragma omp parallel for schedule(static, 1)
  for ( int tid = 0; tid < nT; tid++ ) { 
    uint64_t lb = tid  * block_size;
    uint64_t ub = lb + block_size;
    if ( tid == (nT-1) ) { ub = nR_in; }
    ${out_ctype} * l_out_fld = out_fld + (n_buf_per_core * tid);
    for ( uint64_t i = lb; i < ub; i++ ) { 
      ${ifcond}
        ${val_ctype} val = val_fld[i];
        ${grpby_ctype} grpby = grpby_fld[i];
        l_out_fld[grpby] += val;
      ${endif}
    }
  }
BYE:
  return status;
}
   ]]
}
