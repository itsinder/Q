return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include <unistd.h>
#include <stdint.h>
#include <math.h>

extern int
${fn}(  
      const ${in_ctype} * restrict in,  
      uint64_t *nn_in,
      uint64_t nR,
      void *dummy,
      ${out_ctype} * out,
      uint64_t *nn_out
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

static void __operation(
  ${in_ctype} a,
  ${out_ctype} *ptr_c
  )
{
  ${out_ctype} c;
  ${c_code_for_operator}  
  *ptr_c = c;
}

int
${fn}(  
      const ${in_ctype} * restrict in,
      uint64_t *nn_in,
      uint64_t nR,  
      void *dummy,
      ${out_ctype} * out,
      uint64_t *nn_out
      )

{
  int status = 0;
  if ( in == NULL ) { go_BYE(-1); }
  if ( nR == 0 ) { go_BYE(-1); }

#pragma omp parallel for 
  for ( uint64_t i = 0; i < nR; i++ ) { 

    uint64_t widx = i >> 8; // word index
    uint64_t bidx = i & 0xFF; // bit index

    ${in_ctype} inv = ${in_fn}
    
    if ( ! (  inv == 0 || inv == 1 ) ) {
      // Use go_BYE(-1)
      continue;
    }
    ${out_fn}
  } 
  BYE:
  return status;
}
   ]]
}
