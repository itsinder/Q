return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include <unistd.h>
#include <stdint.h>

extern int
${fn}(  
      const ${in_ctype} * restrict in,  
      uint64_t *nn_in,
      uint64_t nR,
      ${scalar_ctype} *ptr_sval,
      ${out_ctype} * out,
      uint64_t *nn_out
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

static void __operation(
  ${in_ctype} a,
  ${scalar_ctype} b,
  ${out_ctype} *ptr_c
  )
{
  ${out_ctype} c;
  ${c_code_for_operator}
  *ptr_c = c;
}

int
${fn}(  
      const ${in_ctype} * restrict in,
      uint64_t *nn_in,
      uint64_t nR,  
      ${scalar_ctype} *ptr_sval,
      ${out_ctype} * out,
      uint64_t *nn_out
      )

{
  int status = 0;

  if ( in == NULL ) { go_BYE(-1); }
  if ( out == NULL ) { go_BYE(-1); }
  if ( ptr_sval == NULL ) { go_BYE(-1); }
  if ( nR == 0 ) { go_BYE(-1); }
  ${scalar_ctype} sval = *ptr_sval;

#pragma omp parallel for schedule(static)
  for ( uint64_t i = 0; i < nR; i++ ) { 
    ${in_ctype} inv; 
    ${out_ctype} outv; 
    inv = in[i];
    __operation(inv, sval, &outv);
    out[i] = outv;
  } 
  BYE:
  return status;
}
   ]]
}
