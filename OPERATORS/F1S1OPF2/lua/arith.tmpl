return require 'code_gen' {

   declaration = [[

#include "q_types.h"
#include "q_macros.h"
#include <unistd.h>
#include <stdint.h>

extern int
${fn}(  
      const ${fldtype} * restrict in,  
      uint64_t nR,
      ${scalar_c_type} sval,
      ${out_c_type} * out
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

static void __operation(
  ${fldtype} a,
  ${scalar_c_type} b,
  ${out_c_type} *ptr_c
  )
{
  ${fldtype} c;
  ${c_code_for_operator}
  *ptr_c = c;
}

int
${fn}(  
      const ${fldtype} * restrict in,
      uint64_t nR,  
      ${scalar_c_type} sval,
      ${out_c_type} * out
      )

{
  int status = 0;
  ${fldtype} inv; 
  ${out_c_type} outv; 

#pragma omp parallel for 
  for ( uint64_t i = 0; i < nR; i++ ) { 
    inv = in[i];
    __operation(inv, sval, &outv);
    out[i] = outv;
  } 
  return status;
}
   ]]
}
