return function (
  in_qtype,
  scalar
  )
    local scalar_val = nil
    if ( type(scalar) == "number" ) then 
      scalar_val = scalar
    else
      assert(type(scalar) == "table")
      scalar_val = assert(scalar.value)
    end
    local qconsts = require 'Q/UTILS/lua/q_consts'
    local conv_lnum_to_cnum = require 'Q/UTILS/lua/conv_lnum_to_cnum'
    assert(( in_qtype == "I1" ) or ( in_qtype == "I2") or ( in_qtype == "I4" ) or 
       ( in_qtype == "I8" ) or ( in_qtype == "F4") or ( in_qtype == "F8" ),
       "type must be I1/I2/I4/I8/F4/F8")
    local tmpl = 'f1s1opf2_cmp.tmpl'
    local subs = {}; 
    subs.fn = "<<operator>>_" .. in_qtype 
    subs.in_ctype = qconsts.qtypes[in_qtype].ctype
    subs.out_qtype = "B1"
    subs.comparison = ' <<comparison>>  '
    -- local ffi     = require 'Q/UTILS/lua/q_ffi'
    -- subs.c_mem = ffi.new(subs.in_ctype .. "[?]", 1, { scalar} )
    subs.c_mem = conv_lnum_to_cnum(scalar_val, in_qtype)
    return subs, tmpl
end
