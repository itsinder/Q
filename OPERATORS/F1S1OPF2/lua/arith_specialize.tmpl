return function (
  ftype,
  scalar_val,
  scalar_type
  )
  local is_base_qtype = assert(require 'UTILS/lua/is_base_qtype')
  assert(is_base_qtype(ftype))
  assert(is_base_qtype(scalar_type))
  --===========================================
  local promote = require 'UTILS/lua/promote'
  local out_type = assert(promote(ftype, scalar_type))
  assert( ( type(scalar_val) == "string") or ( type(scalar_val) == "number") )
  local conv_fn = "txt_to_" .. scalar_type
  local c_mem = 0 -- TODO FIX 
  --[[ TODO local status  = assert(ffi.C.conv_fn(scalar, ...),
    "Unable to convert to scalar " .. scalar_val)
  --]]
  local tmpl = 'arith.tmpl'
  local subs = {}; 
  subs.fn = "<<operator>>" .. ftype .. "_" .. scalar_type
  subs.fldtype = g_qtypes[ftype].ctype
  subs.c_code_for_operator = "<<c_code>>;"
  subs.c_scalar = c_mem
  subs.out_ctype = g_qtypes[out_type].ctype
  subs.scalar_ctype = g_qtypes[scalar_type].ctype
  return subs, tmpl
end
