return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include <stdint.h>
#include <time.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>
#include <math.h>
extern int
const_${out_qtype}(
  ${out_ctype} *X,
  uint64_t nX,
  ${out_ctype} *ptr_val
  );
   ]],
   definition = [[

#include "_random_${out_qtype}.h"

/* assembly code to read the TSC */
static inline uint64_t RDTSC()
{
  unsigned int hi, lo;
    __asm__ volatile("rdtsc" : "=a" (lo), "=d" (hi));
      return ((uint64_t)hi << 32) | lo;
}

//START_FUNC_DECL
int
random_${out_qtype}(
  ${out_ctype} *X,
  uint64_t nX,
  ${out_ctype} *ptr_val,
  uint64_t seed,
  ${out_ctype} lb,
  ${out_ctype} ub,
  bool is_first
  )
//STOP_FUNC_DECL
{
  int status = 0;
  if ( is_first ) { //seed has not yet been set
    if ( seed == 0 ) {
     seed = RDTSC();
    }
    srand48(seed);
  }
  ${out_ctype} range = ub - lb + 1;
  for ( uint64_t i = 0; i < nX; i++ ) { 
    ${gen_type} x = ${generator}();
    X[i] = (${out_ctype}) (lb + ${scale_code} )
  }

  
  return status;
}


   ]]
}
