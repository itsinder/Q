return require 'Q/UTILS/lua/code_gen' {

   declaration = [[

#include "q_incs.h"
#include "_rdtsc.h"

typedef struct _rand_${out_qtype}_rec_type {
  uint64_t seed;
  struct drand48_data buffer;
  ${out_ctype} lb;
  ${out_ctype} ub;
} RAND_${out_qtype}_REC_TYPE;

extern int
rand_${out_qtype}(
  ${out_ctype} *X,
  uint64_t nX,
  RAND_${out_qtype}_REC_TYPE *ptr_in,
  uint64_t idx
  );
   ]],

   definition = [[

#include "_rand_${out_qtype}.h"


//START_FUNC_DECL
int
rand_${out_qtype}(
  ${out_ctype} *X,
  uint64_t nX,
  RAND_${out_qtype}_REC_TYPE *ptr_in,
  uint64_t idx
  )
//STOP_FUNC_DECL
{
  int status = 0;

  uint64_t seed = ptr_in->seed;
  ${out_ctype} lb = ptr_in->lb;
  ${out_ctype} ub = ptr_in->ub;
  if ( idx == 0 ) { //seed has not yet been set
    if ( seed <= 0 ) {
     seed = RDTSC();
    }
    srand48_r(seed, &(ptr_in->buffer));
  }
  ${out_ctype} range = ub - lb;
// TODO #pragma omp parallel for
  for ( uint64_t i = 0; i < nX; i++ ) { 
    ${gen_type} x;
    ${generator}(&(ptr_in->buffer), &x);
    X[i] = (${out_ctype}) (lb + (${scaling_code}) );
  }
  return status;
}

   ]]
}
