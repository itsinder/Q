return require 'code_gen' {

   declaration = [[

#include "q_types.h"
${includes}
extern int
${fn}(  
      const ${in1type} * restrict in1,  
      const ${in2type} * restrict in2,  
      uint64_t nR,  
      uint8_t *restrict out 
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

static void
__operation(
      ${in1type} a,
      ${in2type} b, 
      uint8_t *ptr_c
      )
      {
      uint8_t  c;
      ${c_code_for_operator}
      *ptr_c = c;
      }

int
${fn}(  
      const ${in1type} * restrict in1,  
      const ${in2type} * restrict in2,  
      uint64_t nR,  
      uint8_t * restrict out 
      )

{ 
  int status = 0;
  ${in1type} inv1; 
  ${in2type} inv2; 
  //-- Initialize out 
#pragma omp parallel for simd
  for ( uint64_t i = 0; i < nR/8; i++ ) {  
    out[i] = 0;
  }
  // handle case when nR is not multiple of 8
  if ( ( nR / 8 ) * 8 ) != 8 ) { 
    out[nR/8 + 1] = 0;
  }
#pragma omp parallel for simd
 for ( uint64_t i = 0; i < nR; i++ ) {  
   inv1 = *in1; 
   inv2 = *in2; 
   int oval = inv1 ${comparison} inv2;
   mcr_set_bit(out, i, oval);
   in1++; 
   in2++; 
 } 
 return status;
}

   ]]
}
