return require 'code_gen' {

   declaration = [[

#include "q_types.h"
#include "q_macros.h"
${includes}
extern int
${fn}(  
      const ${in1type} * restrict in1,  
      const ${in2type} * restrict in2,  
      uint64_t nR,  
      uint64_t *restrict out 
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

static void
__operation(
      ${in1type} a,
      ${in2type} b, 
      uint64_t *ptr_c
      )
      {
      uint64_t  c;
      ${c_code_for_operator}
      *ptr_c = c;
      }

int
${fn}(  
      const ${in1type} * restrict in1,  
      const ${in2type} * restrict in2,  
      uint64_t nR,  
      uint64_t * restrict out 
      )

{ 
  int status = 0;
#pragma omp parallel for 
  /* TODO: Convince yourself that work is parcelled out on 
  64 element boundaries */
  for ( uint64_t i = 0; i < nR; i++ ) {  
    int bitidx = i % 64;
    ${in1type} inv1 = in1[i]; 
    ${in2type} inv2 = in2[i]; 
    int obval = inv1 ${comparison} inv2;
    /* TODO: Avoid the if condition */
    if ( obval == 0 ) { 
      mcr_set_bit(out[(i/64)], bitidx);
    }
    else {
      mcr_unset_bit(out[(i/64)], bitidx);
    }
  }
  return status;
}

   ]]
}
