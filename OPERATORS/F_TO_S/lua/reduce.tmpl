return require 'code_gen' {

   declaration = [[

#include "q_types.h"
#include "q_macros.h"

typedef struct _reduce_${disp_intype}_args {
  ${reduce_intype} cum_val;
  } REDUCE_${disp_intype}_ARGS;
  
${includes}
extern int
${fn}(  
      const ${intype} * restrict in,  
      uint64_t nR,
      void *ptr_args,
      uint32_t num_threads
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

int
${fn}(  
      const ${intype} * restrict in,
      uint64_t nR,  
      void *in_ptr_args,
      uint32_t num_threads
      )

{
  int status = 0;
  ${intype} inv; 
  REDUCE_${disp_intype}_ARGS *ptr_args;
  ptr_args = (REDUCE_${disp_intype}_ARGS *)in_ptr_args;

  ${reduce_intype} curr_val = ptr_args->cum_val;
  if ( num_threads == 0 ) { go_BYE(-1); }

  uint64_t block_size = nR / num_threads;
#pragma omp parallel for 
  for ( int t = 0; t < num_threads; t++ ) { 
    uint64_t lb = t * block_size;
    uint64_t ub = lb + block_size;
    if ( t == (num_threads-1) ) { ub = nR; }
    ${reduce_intype} lval = ${init_val};
    for ( uint64_t i  = lb; i < ub; i++ ) {  
      inv = in[i];
      lval = ${reducer}(lval, inv);
    }
#pragma omp critical _${fn}
    {
    curr_val = ${reducer}(curr_val, lval);
    }
  } 
  ptr_args->cum_val = curr_val;
BYE:
  return status;
}
   ]]
}
