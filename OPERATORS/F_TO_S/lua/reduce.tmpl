return require 'code_gen' {

   declaration = [[

#include "q_types.h"
${includes}
extern int
${fn}(  
      const ${intype} * restrict in,  
      uint64_t nR,
      void *ptr_args
      ) 
;

   ]],
   definition = [[

#include "_${fn}.h"

int
${fn}(  
      const ${intype} * restrict in,
      uint64_t nR,  
      void *ptr_args
      )

{
  int status = 0;
  ${intype} inv; 
  ${intype} val_so_far = ptr_args->val;



  uint64_t block_size = nR / num_threads();
#pragma omp parallel for 
  for ( int b = 0; b < num_blocks; b++ ) { 
    uint64_t lb = b * block_size;
    uint64_t ub = lb + block_size;
    if ( b == (num_blocks-1)  { ub = nR; }
    ${intype} lval = ${init_val};
    for ( uint64_t  = lb; i < ub; i++ ) {  
      inv = in[i];
      lval = ${reducer}(lval, inv);
    }
    #pragma omp critical _${fn}
    {
    val_so_far = ${reducer}(val_so_far, lval);
    }
  } 
  *ptr_args->val = val_so_far;
  return status;
}
   ]]
}
